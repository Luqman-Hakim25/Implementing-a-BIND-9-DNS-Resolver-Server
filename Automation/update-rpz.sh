#!/bin/bash

# Set the directory where the RPZ files are stored
RPZ_DIR="/etc/bind"
MALWARE_DB="$RPZ_DIR/rpz.malware.db"
PHISHING_DB="$RPZ_DIR/rpz.phishing.db"

# URLs for the public feeds
MALWARE_FEED_URL="https://urlhaus.abuse.ch/downloads/text/"
PHISHING_FEED_URL="https://urlhaus.abuse.ch/downloads/text_online"

# Temporary files for validation
TEMP_MALWARE="/tmp/rpz_malware.tmp"
TEMP_PHISHING="/tmp/rpz_phishing.tmp"

# Persistent serial number tracking file
SERIAL_TRACKER="/var/lib/bind/serial_tracker"

# Ensure the serial tracker file exists
if [[ ! -f $SERIAL_TRACKER ]]; then
    echo "0" > $SERIAL_TRACKER
fi

# Function to generate the next serial number
get_next_serial() {
    current_serial=$(cat $SERIAL_TRACKER)
    new_serial=$((current_serial + 1))
    echo $new_serial > $SERIAL_TRACKER
    echo $new_serial
}

# Static header template
generate_header() {
    local serial=$1
    cat <<EOF
; BIND reverse data file for RPZ zones
;
; DO NOT EDIT THIS FILE - it is automatically generated.
;
\$TTL    86400
@       IN      SOA     localhost. root.localhost. (
                              $serial  ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                          86400 )       ; Negative Cache TTL
;
@       IN      NS      localhost.
EOF
}

# Process malware feed with a limit
if curl -s $MALWARE_FEED_URL | grep -E '^http' | awk -F[/:] '{print $4 " CNAME ."}' | tr -d '\r' | head -n 4000 > $TEMP_MALWARE; then
    malware_serial=$(get_next_serial)
    generate_header $malware_serial > $MALWARE_DB
    cat $TEMP_MALWARE >> $MALWARE_DB
    echo "$(date): Malware feed updated with limited records." >> /var/log/rpz-update.log
else
    echo "$(date): Failed to process malware feed." >> /var/log/rpz-update.log
fi

# Process phishing feed
if curl -s $PHISHING_FEED_URL | grep -E '^http' | awk -F[/:] '{if ($4 ~ /^[a-zA-Z0-9.-]+$/) print $4 " CNAME ."}' | tr -d '\r' | head -n 4000 > $TEMP_PHISHING; then
    phishing_serial=$(get_next_serial)
    generate_header $phishing_serial > $PHISHING_DB
    cat $TEMP_PHISHING >> $PHISHING_DB
    echo "$(date): Phishing feed updated successfully." >> /var/log/rpz-update.log
else
    echo "$(date): Failed to process phishing feed." >> /var/log/rpz-update.log
fi


# Set appropriate permissions for the RPZ files
chown bind:bind $MALWARE_DB $PHISHING_DB
chmod 644 $MALWARE_DB $PHISHING_DB

# Reload BIND to apply the new RPZ zones
if systemctl reload bind9; then
    echo "$(date): RPZ zones updated and BIND reloaded successfully." >> /var/log/rpz-update.log
else
    echo "$(date): Failed to reload BIND. Check configuration and logs." >> /var/log/rpz-update.log
fi

